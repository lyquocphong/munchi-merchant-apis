generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_URL")
}

model Session {
  id                       Int        @id @default(autoincrement())
  publicId                 String     @unique @default(uuid())
  refreshToken             String     @unique
  userId                   Int
  user                     User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businesses               Business[] @relation("BusinessSessionTable")
  deviceId                 String?    @unique
  isOnline                 Boolean    @default(true)
  lastAccessTs             DateTime   @db.Timestamp()
  openAppNotificationCount Int?       @default(0)
  openAppNotifcationSending Boolean   @default(false)
}

model User {
  id                           Int        @id @default(autoincrement())
  orderingUserId               Int        @unique
  orderingAccessToken          String     @unique
  orderingAccessTokenExpiredAt DateTime   @db.Timestamp()
  firstName                    String
  lastName                     String
  email                        String     @unique
  hash                         String
  level                        Int?
  publicId                     String     @unique @default(uuid())
  sessions                     Session[]
  businesses                   Business[] @relation("MyUserBusinessTable")

  @@map("user")
}

model Business {
  id                 Int       @id @default(autoincrement())
  orderingBusinessId Int       @unique
  publicId           String    @unique @default(uuid())
  name               String
  owners             User[]    @relation("MyUserBusinessTable")
  sessions           Session[] @relation("BusinessSessionTable")
  logo               String?

  @@map("business")
}

model Notification {
  id          Int      @id @default(autoincrement())
  type        String
  deviceId    String
  businessId  String
  scheduledAt DateTime @db.Timestamp()
  userId      Int

  @@map("notification")
}

model ActiveStatusQueue {
  id               Int      @id @default(autoincrement())
  userPublicId     String   @unique
  businessPublicId String   @unique
  time             DateTime @db.Timestamp()
  provider         String
  processing       Boolean  @default(false)

  @@map("active_status_queue")
}
